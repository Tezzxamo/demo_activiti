/**
 * 所有buildscript｛｝块都必须出现在脚本中任何插件{}块之前
 * 构建gradle脚本自身需要的资源，可以声明的资源包括依赖项、第三方插件、maven仓库等等
 */
buildscript {
    //
    ext {
        mysqlVersion = "8.0.30"  //mysql
        fastjsonVersion = "2.0.42" //fastjson
        lombokVersion = '1.18.30' //lombok
        springBootVersion = '3.0.2' //springBoot
        springCloudVersion = '2022.0.2' //springCloud
        springCloudAlibabaVersion = '2022.0.0.0-RC2'//cloudAlibaba 2022.0.0.0-RC2
        mybatisPlusVersion = '3.5.3.1' //mybatisPlus
    }

    // buildscript脚本构建时需要去寻找的仓库
    // 从前往后顺序执行，找不到就向后查找
    repositories {
        mavenLocal() //从maven本地仓库下载jar到gradle仓库
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/grails-core' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter/' }
        maven { url "https://mvn.getui.com/nexus/content/repositories/releases/" }
        maven {
            url 'http://mirrors.huaweicloud.com/repository/maven/'
            allowInsecureProtocol = true
        }
        maven { url = uri("https://nexus.bsdn.org/content/groups/public/") }
        maven { url = uri('https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases/') }
        maven { url = uri('https://repo.maven.apache.org/maven2/') }
        mavenCentral()
    }

    //构建用到的插件
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.0'//maven方式插件
    }

}


// 插件要在最上边初始化
plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'idea'
}

// 针对所有project的配置
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' //类似于maven的版本管理方式
    group = 'org.example'
    version = '1.0.0-SNAPSHOT'
    // jdk版本
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // 必须在插入 java插件后 执行该命令
    configurations {
        compileJava {
            extendsFrom annotationProcessor
        }
    }

    // 所有project项目的 jar获取方式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.deprecation = true
    }

    //全局配置时查找依赖的使用
    repositories {
        mavenLocal() //从maven本地仓库下载jar到gradle仓库
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/grails-core' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter/' }
        maven { url "https://mvn.getui.com/nexus/content/repositories/releases/" }
        maven {
            url 'http://mirrors.huaweicloud.com/repository/maven/'
            allowInsecureProtocol = true
        }
        maven { url = uri("https://nexus.bsdn.org/content/groups/public/") }
        maven { url = uri('https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases/') }
        maven { url = uri('https://repo.maven.apache.org/maven2/') }
        mavenCentral()
    }
}


// 子项目配置
subprojects {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' //类似于maven的版本管理方式

    // 子model统一jar引入
    dependencies {
        annotationProcessor 'org.projectlombok:lombok' //注释处理器
        implementation 'org.projectlombok:lombok' //引入lombok依赖
    }

    // 提供类似 Maven 的依赖管理和排除的 Gradle 插件
    // 使用类似于maven的方式（io.spring.dependency-management） 统一版本管理
    // https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/#pom-generation  学习网址
    // DSL 允许您使用:分隔的字符串来声明依赖管理，以配置托管依赖的坐标
    // 统一版本管理
    dependencyManagement {
        dependencies {
            //DSL 允许您使用:分隔的字符串来声明依赖管理，以配置托管依赖的坐标
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "mysql:mysql-connector-java:${mysqlVersion}"
            dependency "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
            dependency "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}"
            dependency "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

            dependency "cn.hutool:hutool-all:5.8.22"
            dependency "com.alibaba.fastjson2:fastjson2:2.0.42"
            dependency "com.alibaba:druid-spring-boot-starter:1.2.9"
            dependency "org.springdoc:springdoc-openapi-ui:1.6.14"
            dependency "cn.dev33:sa-token-spring-boot-starter:1.37.0"

            // activiti
            dependency 'org.activiti:activiti-bpmn-layout:7.11.0'
            dependency 'org.activiti:activiti-spring-boot-starter:7.11.0'
            dependency 'org.activiti:activiti-image-generator:7.11.0'
        }
        // 引入bom统一包管理
        imports {
            // 引入 spring-cloud统一包管理
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            // 引入 spring-cloud-alibaba统一包管理
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            // 引入 spring-boot统一包管理
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
    // 公共依赖
    dependencies {
        // springboot
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation('org.springframework.boot:spring-boot-starter-validation')
        implementation('org.springframework.boot:spring-boot-starter-aop')
        implementation('org.springframework.boot:spring-boot-starter-data-jpa')
        implementation('org.springframework.boot:spring-boot-starter-security')
        implementation('org.springframework.boot:spring-boot-configuration-processor')

        // springcloud

        // 通用依赖
        implementation 'mysql:mysql-connector-java'
        implementation 'cn.hutool:hutool-all'
        implementation 'com.alibaba.fastjson2:fastjson2'
        implementation 'cn.dev33:sa-token-spring-boot-starter'
        implementation 'org.activiti:activiti-bpmn-layout'
        implementation 'org.activiti:activiti-spring-boot-starter'
        implementation 'org.activiti:activiti-image-generator'
        implementation 'org.springdoc:springdoc-openapi-ui'
        implementation 'com.baomidou:mybatis-plus-boot-starter'
        implementation 'com.alibaba:druid-spring-boot-starter'
    }
}

//禁止根项目一切行为(不影响模块)
//禁用以后执行build的时候不会构建parent项目
tasks.forEach {
    it.enabled = false
}

/**
 * Gradle打标准jar包
 * 根项目需禁用springboot插件，否则会构建失败
 * 光禁用BootJar是不行的，还要启用Jar。
 * GroovyDSL的写法，对KotlinDSL无效
 * bootJar{enabled = false}
 * jar{enabled=true}
 */

/**  KotlinDSL写法  */
tasks.bootJar { enabled = false }
tasks.jar { enabled = true }


tasks.named('test') {
    useJUnitPlatform()
}
